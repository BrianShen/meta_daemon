<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!--spring注解驱动-->
       <context:annotation-config/>
    <!--扫描注解的-->
       <context:component-scan base-package="com.fanli.metadata.core"/>
       <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <!--开启这个配置，spring才能识别@Scheduled注解-->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>

    <context:property-placeholder location="classpath:jdbc.properties" order="1"/>

       <bean id="dataSourcePool"
             class="com.mchange.v2.c3p0.ComboPooledDataSource"
             destroy-method="close">

              <property name="jdbcUrl" value="${JDBC.url}"></property>
              <property name="user" value="${JDBC.username}"></property>
              <property name="password" value="${JDBC.password}"></property>
              <property name="driverClass" value="${JDBC.driver}"></property>

              <!-- 详细参数说明参见database-config.properties -->
              <property name="initialPoolSize" value="3"></property>
              <property name="minPoolSize" value="5"></property>
              <property name="maxPoolSize" value="20"></property>
              <property name="maxIdleTime" value="140"></property>
              <property name="acquireIncrement" value="3"></property>
              <property name="idleConnectionTestPeriod" value="60"></property>
              <property name="acquireRetryAttempts" value="20"></property>
              <property name="breakAfterAcquireFailure" value="false"></property>
              <property name="testConnectionOnCheckout" value="false"></property>
              <property name="checkoutTimeout" value="10000"></property>
              <property name="preferredTestQuery" value="select 1"></property>
              <!--连接池中保留的最小连接数。-->

              <!--连接池中保留的最大连接数。Default: 15 -->

              <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->

              <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->

              <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->

              <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
               属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
               如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->

              <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->

              <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->

              <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
               保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
               获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->

              <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
               时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
               等方法来提升连接测试的性能。Default: false -->
       </bean>

    <bean id="dataSourcePool_hive_meta"
          class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">

        <property name="jdbcUrl" value="${hive.meta.url}"></property>
        <property name="user" value="${hive.meta.username}"></property>
        <property name="password" value="${hive.meta.password}"></property>
        <property name="driverClass" value="${hive.meta.driver}"></property>

        <!-- 详细参数说明参见database-config.properties -->
        <property name="initialPoolSize" value="3"></property>
        <property name="minPoolSize" value="5"></property>
        <property name="maxPoolSize" value="20"></property>
        <property name="maxIdleTime" value="140"></property>
        <property name="acquireIncrement" value="3"></property>
        <property name="idleConnectionTestPeriod" value="60"></property>
        <property name="acquireRetryAttempts" value="20"></property>
        <property name="breakAfterAcquireFailure" value="false"></property>
        <property name="testConnectionOnCheckout" value="false"></property>
        <property name="checkoutTimeout" value="10000"></property>
        <property name="preferredTestQuery" value="select 1"></property>
    </bean>

   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <property name="dataSource" ref="dataSourcePool"/>
          <property name="configLocation" value="classpath:mybatis_config_target.xml"/>
   </bean>
    <bean id="metaSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourcePool_hive_meta"/>
        <property name="configLocation" value="classpath:mybatis_config_src.xml"/>
    </bean>

    <bean id="metaSourceDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface"
                  value="com.fanli.metadata.core.dao.MetaSourceDao"/>
        <property name="sqlSessionFactory" ref="metaSqlSessionFactory"/>
    </bean>

    <bean id="metaTargetDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface"
                  value="com.fanli.metadata.core.dao.MetaTargetDao"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSourcePool"/>
    <!--启动注解驱动的事务-->
    <tx:annotation-driven/>


</beans>